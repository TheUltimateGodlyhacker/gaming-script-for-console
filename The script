(function () {
  if (document.getElementById('customMenu')) {
    alert('Menu bestaat al!');
    return;
  }

  // CSS toevoegen
  const style = document.createElement('style');
  style.textContent = `
    #customMenu {
      position: fixed;
      top: 100px;
      left: 100px;
      width: 320px;
      background: #f0f0f0;
      border: 1px solid #ccc;
      box-shadow: 0 0 10px rgba(0,0,0,0.5);
      border-radius: 6px;
      font-family: sans-serif;
      z-index: 9999;
    }
    #customMenuHeader {
      background: #444;
      color: white;
      padding: 10px;
      cursor: move;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-top-left-radius: 6px;
      border-top-right-radius: 6px;
    }
    #customMenuButtons {
      display: flex;
      flex-wrap: wrap;
      padding: 10px;
      gap: 5px;
    }
    .menuButton {
      flex: 1 0 30%;
      padding: 6px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }
    .menuButton:hover {
      background: #0056b3;
    }
    #toggleMenu {
      background: #666;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      border-radius: 4px;
    }
    canvas#snakeCanvas {
      display: block;
      margin: 10px auto;
      border: 2px solid #333;
      background: #000;
    }
  `;
  document.head.appendChild(style);

  // Menu bouwen
  const menu = document.createElement('div');
  menu.id = 'customMenu';
  menu.innerHTML = `
    <div id="customMenuHeader">
      <span>Menu</span>
      <button id="toggleMenu">−</button>
    </div>
    <div id="customMenuButtons"></div>
  `;
  document.body.appendChild(menu);

  const buttonsContainer = document.getElementById('customMenuButtons');

  // 40 knoppen toevoegen
  for (let i = 1; i <= 50; i++) {
    const btn = document.createElement('button');
    btn.className = 'menuButton';
    btn.textContent = 'Knop ' + i;
    btn.id = 'menuBtn' + i;
    buttonsContainer.appendChild(btn);
  }

  // Minimaliseer/maximaliseer
  let isMinimized = false;
  document.getElementById('toggleMenu').onclick = function () {
    isMinimized = !isMinimized;
    buttonsContainer.style.display = isMinimized ? 'none' : 'flex';
    this.textContent = isMinimized ? '+' : '−';
  };

  // Sleepfunctionaliteit
  const header = document.getElementById('customMenuHeader');
  let isDragging = false, offsetX, offsetY;

  header.addEventListener('mousedown', function (e) {
    isDragging = true;
    offsetX = e.clientX - menu.offsetLeft;
    offsetY = e.clientY - menu.offsetTop;
  });

  document.addEventListener('mousemove', function (e) {
    if (isDragging) {
      menu.style.left = e.clientX - offsetX + 'px';
      menu.style.top = e.clientY - offsetY + 'px';
    }
  });

  document.addEventListener('mouseup', function () {
    isDragging = false;
  });
})();
(function () {
  const btn1 = document.getElementById('menuBtn1');
  if (!btn1) {
    alert("Menu nog niet geladen!");
    return;
  }

  btn1.onclick = function () {
    if (document.getElementById('snakeWindow')) return;

    const snakeWindow = document.createElement('div');
    snakeWindow.id = 'snakeWindow';
    snakeWindow.style.position = 'fixed';
    snakeWindow.style.top = '150px';
    snakeWindow.style.left = '150px';
    snakeWindow.style.width = '320px';
    snakeWindow.style.background = '#222';
    snakeWindow.style.border = '2px solid #333';
    snakeWindow.style.borderRadius = '8px';
    snakeWindow.style.boxShadow = '0 0 12px rgba(0,0,0,0.7)';
    snakeWindow.style.zIndex = '10000';
    snakeWindow.innerHTML = `
      <div id="snakeHeader" style="background:#111; color:white; padding:8px; cursor:move; border-top-left-radius:8px; border-top-right-radius:8px;">
        Snake Game <button id="closeSnake" style="float:right;background:#900;color:white;border:none;border-radius:4px;padding:2px 6px;cursor:pointer;">X</button>
      </div>
      <canvas id="snakeCanvas" width="300" height="300" style="display:block;margin:10px auto;border:2px solid #444;background:black;"></canvas>
    `;
    document.body.appendChild(snakeWindow);

    document.getElementById('closeSnake').onclick = () => {
      clearInterval(game);
      snakeWindow.remove();
    };

    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('snakeHeader');
    header.addEventListener('mousedown', (e) => {
      isDragging = true;
      offsetX = e.clientX - snakeWindow.offsetLeft;
      offsetY = e.clientY - snakeWindow.offsetTop;
    });
    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        snakeWindow.style.left = e.clientX - offsetX + 'px';
        snakeWindow.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', () => isDragging = false);

    const canvas = document.getElementById('snakeCanvas');
    const ctx = canvas.getContext('2d');
    const gridSize = 10;
    let snake = [{ x: 150, y: 150 }];
    let direction = 'RIGHT';
    let food = { x: 100, y: 100 };
    let paused = false;

    function drawRect(x, y, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x, y, gridSize, gridSize);
    }

    function moveSnake() {
      if (paused) return;

      const head = { ...snake[0] };
      if (direction === 'RIGHT') head.x += gridSize;
      else if (direction === 'LEFT') head.x -= gridSize;
      else if (direction === 'UP') head.y -= gridSize;
      else if (direction === 'DOWN') head.y += gridSize;
      snake.unshift(head);

      if (head.x === food.x && head.y === food.y) {
        placeFood();
      } else {
        snake.pop();
      }

      if (
        head.x < 0 || head.x >= canvas.width ||
        head.y < 0 || head.y >= canvas.height ||
        snake.slice(1).some(p => p.x === head.x && p.y === head.y)
      ) {
        alert("Game Over!");
        clearInterval(game);
        snakeWindow.remove();
      }
    }

    function placeFood() {
      food = {
        x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize,
        y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize,
      };
    }

    function draw() {
      if (paused) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      snake.forEach(s => drawRect(s.x, s.y, 'lime'));
      drawRect(food.x, food.y, 'red');
    }

    document.addEventListener('keydown', (e) => {
      const key = e.key.toLowerCase();
      if (key === 'w' && direction !== 'DOWN') direction = 'UP';
      if (key === 's' && direction !== 'UP') direction = 'DOWN';
      if (key === 'a' && direction !== 'RIGHT') direction = 'LEFT';
      if (key === 'd' && direction !== 'LEFT') direction = 'RIGHT';
      if (e.code === 'Space') {
        paused = !paused;
      }
    });

    const game = setInterval(() => {
      moveSnake();
      draw();
    }, 100);
  };
})();
(function () {
  const tetrisBtn = document.getElementById('menuBtn2');
  if (!tetrisBtn) {
    console.error("Knop 'menuBtn2' niet gevonden.");
    return;
  }

  tetrisBtn.addEventListener('click', () => {
    if (document.getElementById('tetrisWindow')) return;

    // Maak een versleepbaar venster
    const win = document.createElement('div');
    win.id = 'tetrisWindow';
    win.style.cssText = `
      position: fixed;
      top: 120px;
      left: 120px;
      width: 350px;
      background: #111;
      color: white;
      border: 2px solid #333;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
    `;

    win.innerHTML = `
      <div id="tetrisHeader" style="padding: 10px; background: #222; cursor: move;">
        <strong>Tetris</strong>
        <button id="closeTetris" style="float:right; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div id="tetrisGame" style="padding: 10px; text-align: center;">
        <div id="startScreen">
          <h2 style="margin:10px 0;">TETRIS</h2>
          <button id="playTetris" style="padding: 10px 20px; font-size: 16px;">Play</button>
        </div>
        <canvas id="tetrisCanvas" width="200" height="400" style="display:none; background:black; border:2px solid #555;"></canvas>
        <div id="gameOverText" style="display:none; color:red; margin-top:10px; font-weight:bold;"></div>
      </div>
    `;
    document.body.appendChild(win);

    // Sleepfunctionaliteit
    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('tetrisHeader');
    header.addEventListener('mousedown', function (e) {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
    });
    document.addEventListener('mousemove', function (e) {
      if (isDragging) {
        win.style.left = e.clientX - offsetX + 'px';
        win.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', function () {
      isDragging = false;
    });

    // Sluitknop
    document.getElementById('closeTetris').onclick = () => {
      clearInterval(gameInterval);
      win.remove();
    };

    const canvas = document.getElementById('tetrisCanvas');
    const ctx = canvas.getContext('2d');
    const playBtn = document.getElementById('playTetris');
    const startScreen = document.getElementById('startScreen');
    const gameOverText = document.getElementById('gameOverText');

    const COLS = 10;
    const ROWS = 20;
    const BLOCK_SIZE = 20;

    let board = [];
    let current;
    let gameInterval;

    const colors = ['cyan', 'blue', 'orange', 'yellow', 'green', 'purple', 'red'];
    const tetrominoes = [
      [[1, 1, 1, 1]], // I
      [[1, 0, 0], [1, 1, 1]], // J
      [[0, 0, 1], [1, 1, 1]], // L
      [[1, 1], [1, 1]], // O
      [[0, 1, 1], [1, 1, 0]], // S
      [[0, 1, 0], [1, 1, 1]], // T
      [[1, 1, 0], [0, 1, 1]] // Z
    ];

    function resetBoard() {
      board = Array.from({ length: ROWS }, () => Array(COLS).fill(0));
    }

    function drawCell(x, y, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
    }

    function drawBoard() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let y = 0; y < ROWS; y++) {
        for (let x = 0; x < COLS; x++) {
          if (board[y][x]) {
            drawCell(x, y, colors[board[y][x] - 1]);
          }
        }
      }
      if (current) {
        for (let y = 0; y < current.shape.length; y++) {
          for (let x = 0; x < current.shape[y].length; x++) {
            if (current.shape[y][x]) {
              drawCell(current.x + x, current.y + y, colors[current.type]);
            }
          }
        }
      }
    }

    function collide(x, y, shape) {
      for (let row = 0; row < shape.length; row++) {
        for (let col = 0; col < shape[row].length; col++) {
          if (
            shape[row][col] &&
            (board[y + row] && board[y + row][x + col]) !== 0
          ) {
            return true;
          }
        }
      }
      return false;
    }

    function merge() {
      current.shape.forEach((row, y) => {
        row.forEach((val, x) => {
          if (val) board[current.y + y][current.x + x] = current.type + 1;
        });
      });
    }

    function rotate(shape) {
      return shape[0].map((_, i) => shape.map(row => row[i])).reverse();
    }

    function drop() {
      current.y++;
      if (collide(current.x, current.y, current.shape)) {
        current.y--;
        merge();
        clearRows();
        spawn();
        if (collide(current.x, current.y, current.shape)) {
          gameOver();
        }
      }
      drawBoard();
    }

    function clearRows() {
      board = board.filter(row => row.some(cell => !cell));
      while (board.length < ROWS) board.unshift(Array(COLS).fill(0));
    }

    function spawn() {
      const type = Math.floor(Math.random() * tetrominoes.length);
      current = {
        x: Math.floor(COLS / 2) - 2,
        y: 0,
        shape: tetrominoes[type],
        type
      };
    }

    function gameOver() {
      clearInterval(gameInterval);
      gameOverText.style.display = 'block';
      gameOverText.innerText = `GAME OVER`;
      setTimeout(() => {
        gameOverText.style.display = 'none';
        canvas.style.display = 'none';
        startScreen.style.display = 'block';
      }, 3000);
    }

    document.addEventListener('keydown', e => {
      if (!current) return;
      const key = e.key.toLowerCase();
      if ((key === 'arrowleft' || key === 'a') && !collide(current.x - 1, current.y, current.shape)) current.x--;
      if ((key === 'arrowright' || key === 'd') && !collide(current.x + 1, current.y, current.shape)) current.x++;
      if (key === 'arrowdown' || key === 's') drop();
      if (key === 'arrowup' || key === 'w') {
        const rotated = rotate(current.shape);
        if (!collide(current.x, current.y, rotated)) current.shape = rotated;
      }
      drawBoard();
    });

    playBtn.addEventListener('click', () => {
      resetBoard();
      spawn();
      startScreen.style.display = 'none';
      canvas.style.display = 'block';
      gameInterval = setInterval(drop, 400); // Snellere val
    });
  });
})();
(function () {
  const pongBtn = document.getElementById('menuBtn3');
  if (!pongBtn) {
    console.error("Knop 'menuBtn3' niet gevonden.");
    return;
  }

  pongBtn.addEventListener('click', () => {
    if (document.getElementById('pongWindow')) return;

    const win = document.createElement('div');
    win.id = 'pongWindow';
    win.style.cssText = `
      position: fixed;
      top: 120px;
      left: 120px;
      width: 420px;
      background: #111;
      color: white;
      border: 2px solid #333;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
    `;

    win.innerHTML = `
      <div id="pongHeader" style="padding: 10px; background: #222; cursor: move;">
        <strong>Pong</strong>
        <button id="closePong" style="float:right; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div style="padding: 10px; text-align: center;">
        <div id="pongStartScreen">
          <h2>Kies spelmodus</h2>
          <button id="singlePlayerBtn">1 Player</button>
          <button id="multiPlayerBtn">2 Players</button>
        </div>
        <canvas id="pongCanvas" width="400" height="300" style="display:none; background:black;"></canvas>
      </div>
    `;
    document.body.appendChild(win);

    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('pongHeader');
    header.addEventListener('mousedown', function (e) {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
    });
    document.addEventListener('mousemove', function (e) {
      if (isDragging) {
        win.style.left = e.clientX - offsetX + 'px';
        win.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', function () {
      isDragging = false;
    });

    const canvas = document.getElementById('pongCanvas');
    const ctx = canvas.getContext('2d');

    let paddleHeight = 50;
    let paddleY = (canvas.height - paddleHeight) / 2;
    let rightPaddleY = (canvas.height - paddleHeight) / 2;
    let ballX = canvas.width / 2;
    let ballY = canvas.height / 2;
    let ballRadius = 5;
    let dx = 2;
    let dy = 2;

    let upPressed = false;
    let downPressed = false;
    let rightUpPressed = false;
    let rightDownPressed = false;

    let multiplayer = false;

    document.addEventListener('keydown', e => {
      if (e.key === 'w' || e.key === 'W') upPressed = true;
      if (e.key === 's' || e.key === 'S') downPressed = true;
      if (multiplayer) {
        if (e.key === 'ArrowUp') rightUpPressed = true;
        if (e.key === 'ArrowDown') rightDownPressed = true;
      }
    });
    document.addEventListener('keyup', e => {
      if (e.key === 'w' || e.key === 'W') upPressed = false;
      if (e.key === 's' || e.key === 'S') downPressed = false;
      if (multiplayer) {
        if (e.key === 'ArrowUp') rightUpPressed = false;
        if (e.key === 'ArrowDown') rightDownPressed = false;
      }
    });

    function drawPaddle(x, y) {
      ctx.fillStyle = 'white';
      ctx.fillRect(x, y, 10, paddleHeight);
    }

    function drawBall() {
      ctx.beginPath();
      ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);
      ctx.fillStyle = 'white';
      ctx.fill();
      ctx.closePath();
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawPaddle(10, paddleY);
      drawPaddle(canvas.width - 20, rightPaddleY);
      drawBall();

      if (upPressed && paddleY > 0) paddleY -= 4;
      if (downPressed && paddleY < canvas.height - paddleHeight) paddleY += 4;

      if (multiplayer) {
        if (rightUpPressed && rightPaddleY > 0) rightPaddleY -= 4;
        if (rightDownPressed && rightPaddleY < canvas.height - paddleHeight) rightPaddleY += 4;
      } else {
        if (ballY < rightPaddleY + paddleHeight / 2) rightPaddleY -= 2;
        else rightPaddleY += 2;
      }

      if (ballY + dy > canvas.height - ballRadius || ballY + dy < ballRadius) dy = -dy;
      if (
        ballX + dx < 20 && ballY > paddleY && ballY < paddleY + paddleHeight ||
        ballX + dx > canvas.width - 20 && ballY > rightPaddleY && ballY < rightPaddleY + paddleHeight
      ) {
        dx = -dx;
      }

      if (ballX + dx < 0 || ballX + dx > canvas.width) {
        ballX = canvas.width / 2;
        ballY = canvas.height / 2;
      }

      ballX += dx;
      ballY += dy;

      animation = requestAnimationFrame(draw);
    }

    document.getElementById('singlePlayerBtn').onclick = () => {
      multiplayer = false;
      document.getElementById('pongStartScreen').style.display = 'none';
      canvas.style.display = 'block';
      animation = requestAnimationFrame(draw);
    };

    document.getElementById('multiPlayerBtn').onclick = () => {
      multiplayer = true;
      document.getElementById('pongStartScreen').style.display = 'none';
      canvas.style.display = 'block';
      animation = requestAnimationFrame(draw);
    };

document.getElementById('closePong').onclick = () => {
  cancelAnimationFrame(animation);
  document.getElementById('pongWindow').remove();
};

  });
})();
(function () {
  const flappyBtn = document.getElementById('menuBtn4');
  if (!flappyBtn) return;

  flappyBtn.addEventListener('click', () => {
    if (document.getElementById('flappyWindow')) return;

    const win = document.createElement('div');
    win.id = 'flappyWindow';
    win.style.cssText = `
      position: fixed;
      top: 120px;
      left: 120px;
      width: 400px;
      background: #111;
      color: white;
      border: 2px solid #333;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
    `;

    win.innerHTML = `
      <div id="flappyHeader" style="padding: 10px; background: #222; cursor: move;">
        <strong>Flappy Bird</strong>
        <button id="closeFlappy" style="float:right; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div style="padding: 10px; text-align: center;">
        <canvas id="flappyCanvas" width="380" height="300" style="background:skyblue;"></canvas>
        <div id="countdown" style="position:absolute; font-size:40px; color:white; top:180px; left:50%; transform:translateX(-50%);"></div>
        <button id="restartFlappy" style="display:none; margin-top:10px; padding:6px 12px; font-size:16px;">Play again</button>
      </div>
    `;
    document.body.appendChild(win);

    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('flappyHeader');
    header.addEventListener('mousedown', e => {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
    });
    document.addEventListener('mousemove', e => {
      if (isDragging) {
        win.style.left = e.clientX - offsetX + 'px';
        win.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', () => isDragging = false);

    const canvas = document.getElementById('flappyCanvas');
    const ctx = canvas.getContext('2d');
    const restartBtn = document.getElementById('restartFlappy');
    const countdown = document.getElementById('countdown');

    let birdY, velocity, gravity = 0.5, jump = -5;
    let pipes = [], score, gameOver = false, animation;

    function resetGame() {
      birdY = canvas.height / 2;
      velocity = 0;
      pipes = [];
      score = 0;
      gameOver = false;
      restartBtn.style.display = 'none';
      countdown.style.display = 'block';
      countdownSequence();
    }

    function countdownSequence() {
      let timeLeft = 3;
      countdown.textContent = timeLeft;
      const interval = setInterval(() => {
        timeLeft--;
        if (timeLeft > 0) {
          countdown.textContent = timeLeft;
        } else {
          clearInterval(interval);
          countdown.textContent = 'Start!';
          setTimeout(() => {
            countdown.style.display = 'none';
            animation = requestAnimationFrame(draw);
          }, 500);
        }
      }, 1000);
    }

    function drawBird() {
      ctx.fillStyle = 'yellow';
      ctx.beginPath();
      ctx.arc(50, birdY, 10, 0, Math.PI * 2);
      ctx.fill();
    }

    function drawPipes() {
      ctx.fillStyle = 'green';
      pipes.forEach(p => {
        ctx.fillRect(p.x, 0, 30, p.top);
        ctx.fillRect(p.x, p.top + 60, 30, canvas.height - p.top - 60);
      });
    }

    function drawScore() {
      ctx.fillStyle = 'white';
      ctx.font = '16px sans-serif';
      ctx.fillText('Score: ' + score, 10, 20);
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      velocity += gravity;
      birdY += velocity;

      if (pipes.length === 0 || pipes[pipes.length - 1].x < 200) {
        const top = Math.random() * 150 + 20;
        pipes.push({ x: canvas.width, top });
      }

      pipes.forEach(p => p.x -= 2);
      pipes = pipes.filter(p => p.x + 30 > 0);

      pipes.forEach(p => {
        if (50 + 10 > p.x && 50 - 10 < p.x + 30 &&
          (birdY - 10 < p.top || birdY + 10 > p.top + 60)) {
          endGame();
        }
      });

      if (birdY + 10 > canvas.height || birdY - 10 < 0) endGame();

      drawBird();
      drawPipes();
      drawScore();

      score++;
      if (!gameOver) animation = requestAnimationFrame(draw);
    }

    function endGame() {
      cancelAnimationFrame(animation);
      gameOver = true;
      ctx.fillStyle = 'red';
      ctx.font = '24px sans-serif';
      ctx.fillText('Game Over', canvas.width / 2 - 60, canvas.height / 2);
      restartBtn.style.display = 'inline-block';
    }

    document.addEventListener('keydown', e => {
      if (e.code === 'Space' || e.code === 'ArrowUp') velocity = jump;
    });

    restartBtn.onclick = resetGame;
    document.getElementById('closeFlappy').onclick = () => {
      cancelAnimationFrame(animation);
      document.body.removeChild(win);
    };

    resetGame();
  });
})();
(function () {
  const reactionBtn = document.getElementById('menuBtn5');
  if (!reactionBtn) return;

  reactionBtn.addEventListener('click', () => {
    if (document.getElementById('reactionWindow')) return;

    const win = document.createElement('div');
    win.id = 'reactionWindow';
    win.style.cssText = `
      position: fixed;
      top: 150px;
      left: 150px;
      width: 300px;
      background: #111;
      color: white;
      border: 2px solid #333;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
      text-align: center;
      padding: 20px;
    `;

    win.innerHTML = `
      <div id="reactionHeader" style="position: absolute; top: 0; left: 0; right: 0; height: 30px; background: #222; cursor: move; padding: 5px 10px; border-top-left-radius: 8px; border-top-right-radius: 8px;">
        <strong>Reactietest</strong>
        <button id="closeReaction" style="float:right; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div style="margin-top: 40px;">
        <button id="reactionTestBtn" style="width: 100%; height: 100px; font-size: 20px; background: red; color: white; border: none; border-radius: 6px; cursor: pointer;">Wachten...</button>
        <div id="reactionResult" style="margin-top: 20px; font-size: 18px;"></div>
        <button id="playAgainBtn" style="display: none; margin-top: 10px; padding: 6px 12px; font-size: 16px;">Opnieuw spelen</button>
      </div>
    `;
    document.body.appendChild(win);

    // Draggable functionaliteit
    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('reactionHeader');
    header.addEventListener('mousedown', e => {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
      document.body.style.userSelect = 'none'; // voorkomt tekstselectie
    });
    document.addEventListener('mousemove', e => {
      if (isDragging) {
        win.style.left = `${e.clientX - offsetX}px`;
        win.style.top = `${e.clientY - offsetY}px`;
      }
    });
    document.addEventListener('mouseup', () => {
      isDragging = false;
      document.body.style.userSelect = ''; // zet selectie weer aan
    });

    const testBtn = document.getElementById('reactionTestBtn');
    const result = document.getElementById('reactionResult');
    const playAgainBtn = document.getElementById('playAgainBtn');
    let startTime = 0;
    let timeoutId;
    let clickable = false;

    function startReactionTest() {
      testBtn.textContent = 'Wachten...';
      testBtn.style.background = 'red';
      result.textContent = '';
      playAgainBtn.style.display = 'none';
      clickable = false;

      const delay = Math.floor(Math.random() * 3000) + 2000;
      timeoutId = setTimeout(() => {
        clickable = true;
        startTime = Date.now();
        testBtn.textContent = 'Klik!';
        testBtn.style.background = 'green';
      }, delay);
    }

    testBtn.onclick = () => {
      if (!clickable) {
        clearTimeout(timeoutId);
        result.textContent = 'Te vroeg geklikt!';
        playAgainBtn.style.display = 'block';
        testBtn.textContent = 'Wachten...';
        testBtn.style.background = 'red';
        return;
      }
      const reactionTime = Date.now() - startTime;
      result.textContent = `Reactietijd: ${reactionTime} ms`;
      testBtn.style.background = 'gray';
      clickable = false;
      playAgainBtn.style.display = 'block';
    };

    playAgainBtn.onclick = startReactionTest;

    document.getElementById('closeReaction').onclick = () => {
      clearTimeout(timeoutId);
      document.body.removeChild(win);
    };

    startReactionTest();
  });
})();
(function () {
  const clickBtn = document.getElementById('menuBtn6');
  if (!clickBtn) return;

  clickBtn.addEventListener('click', () => {
    if (document.getElementById('clickTestWindow')) return;

    const win = document.createElement('div');
    win.id = 'clickTestWindow';
    win.style.cssText = `
      position: fixed;
      top: 150px;
      left: 150px;
      width: 320px;
      background: #111;
      color: white;
      border: 2px solid #333;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
      text-align: center;
      padding: 20px;
    `;

    win.innerHTML = `
      <div id="clickHeader" style="position: relative; margin-bottom: 10px; cursor: move;">
        <strong>Click Test</strong>
        <button id="closeClickTest" style="position:absolute; right:0; top:0; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div id="countdownText" style="font-size: 24px; margin-bottom: 20px;">Start in 3...</div>
      <button id="clickArea" style="width: 100%; height: 120px; font-size: 20px; background: #555; color: white; border: none; border-radius: 6px; cursor: pointer;" disabled>Klik hier!</button>
      <div id="clickResult" style="margin-top: 20px; font-size: 18px;"></div>
      <button id="clickAgainBtn" style="display: none; margin-top: 10px; padding: 6px 12px; font-size: 16px;">Opnieuw spelen</button>
    `;
    document.body.appendChild(win);

    // Sleepbaar venster
    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('clickHeader');
    header.addEventListener('mousedown', e => {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
    });
    document.addEventListener('mousemove', e => {
      if (isDragging) {
        win.style.left = e.clientX - offsetX + 'px';
        win.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', () => isDragging = false);

    const countdownText = document.getElementById('countdownText');
    const clickArea = document.getElementById('clickArea');
    const result = document.getElementById('clickResult');
    const againBtn = document.getElementById('clickAgainBtn');

    let clicks = 0;
    let timer;

    function startClickTest() {
      clicks = 0;
      result.textContent = '';
      againBtn.style.display = 'none';
      clickArea.disabled = true;
      countdownText.textContent = 'Start in 3...';

      let count = 3;
      const countdown = setInterval(() => {
        count--;
        if (count > 0) {
          countdownText.textContent = `Start in ${count}...`;
        } else {
          clearInterval(countdown);
          countdownText.textContent = 'Klik nu!';
          clickArea.disabled = false;

          timer = setTimeout(() => {
            clickArea.disabled = true;
            const clicksPerSecond = (clicks / 10).toFixed(2);
            result.textContent = `Je klikte ${clicks} keer. (${clicksPerSecond} klikken/sec)`;
            againBtn.style.display = 'block';
          }, 10000); // 10 seconden
        }
      }, 1000);
    }

    clickArea.addEventListener('click', () => {
      if (!clickArea.disabled) {
        clicks++;
      }
    });

    againBtn.onclick = startClickTest;

    document.getElementById('closeClickTest').onclick = () => {
      clearTimeout(timer);
      document.body.removeChild(win);
    };

    startClickTest();
  });
})();
(function () {
  const targetBtn = document.getElementById('menuBtn7');
  if (!targetBtn) return;

  targetBtn.addEventListener('click', () => {
    if (document.getElementById('targetGameWindow')) return;

    const win = document.createElement('div');
    win.id = 'targetGameWindow';
    win.style.cssText = `
      position: fixed;
      top: 150px;
      left: 150px;
      width: 400px;
      height: 400px;
      background: #111;
      color: white;
      border: 2px solid #333;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
      overflow: hidden;
    `;

    win.innerHTML = `
      <div id="targetHeader" style="position: relative; padding: 10px; cursor: move; background: #222;">
        <strong>10 Targets Game</strong>
        <button id="closeTargetGame" style="position:absolute; right:10px; top:8px; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div id="targetContainer" style="position: relative; width: 100%; height: 320px; display: flex; justify-content: center; align-items: center; flex-direction: column;">
        <div id="difficultyMenu">
          <p>Kies moeilijkheid:</p>
          <button class="difficultyBtn" data-size="40">Easy</button>
          <button class="difficultyBtn" data-size="25">Medium</button>
          <button class="difficultyBtn" data-size="15">Hard</button>
        </div>
        <div id="countdown" style="font-size: 48px; display: none; margin-top: 20px;"></div>
      </div>
      <div id="targetResult" style="text-align:center; font-size: 18px; margin-top: 5px;"></div>
      <div style="text-align: center; margin: 2px;">
        <button id="targetRestart" style="display:none; padding: 6px 12px; font-size: 16px;">Opnieuw spelen</button>
      </div>
    `;
    document.body.appendChild(win);

    // Versleepbaar venster
    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('targetHeader');
    header.addEventListener('mousedown', e => {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
    });
    document.addEventListener('mousemove', e => {
      if (isDragging) {
        win.style.left = e.clientX - offsetX + 'px';
        win.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', () => isDragging = false);

    const container = document.getElementById('targetContainer');
    const result = document.getElementById('targetResult');
    const restartBtn = document.getElementById('targetRestart');
    const countdown = document.getElementById('countdown');
    const difficultyMenu = document.getElementById('difficultyMenu');

    let clickCount = 0;
    let startTime = 0;
    let targetSize = 40;

    function spawnTarget() {
      const target = document.createElement('div');
      target.style.cssText = `
        position: absolute;
        width: ${targetSize}px;
        height: ${targetSize}px;
        background: red;
        border-radius: 50%;
        cursor: pointer;
      `;

      const x = Math.floor(Math.random() * (container.clientWidth - targetSize));
      const y = Math.floor(Math.random() * (container.clientHeight - targetSize));
      target.style.left = `${x}px`;
      target.style.top = `${y}px`;

      target.addEventListener('click', () => {
        target.remove();
        clickCount++;

        if (clickCount === 1) startTime = Date.now();

        if (clickCount < 10) {
          spawnTarget();
        } else {
          const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);
          container.innerHTML = `<div style="font-size: 24px;">Je hebt 10 targets geraakt in ${totalTime} seconden!</div>`;
          restartBtn.style.display = 'inline-block';
        }
      });

      container.appendChild(target);
    }

    function startGame() {
      clickCount = 0;
      result.textContent = '';
      restartBtn.style.display = 'none';
      container.innerHTML = '<div id="countdown" style="font-size: 48px; margin-top: 20px;"></div>';
      const countdownEl = document.getElementById('countdown');
      let count = 3;
      countdownEl.textContent = count;

      const interval = setInterval(() => {
        count--;
        if (count === 0) {
          clearInterval(interval);
          container.innerHTML = '';
          spawnTarget();
        } else {
          countdownEl.textContent = count;
        }
      }, 1000);
    }

   restartBtn.onclick = () => {
  difficultyMenu.style.display = 'block';
  container.innerHTML = '';
  container.appendChild(difficultyMenu);
  container.appendChild(countdown);
  countdown.style.display = 'none';
  result.textContent = '';
  restartBtn.style.display = 'none';
};


    difficultyMenu.querySelectorAll('.difficultyBtn').forEach(btn => {
      btn.addEventListener('click', () => {
        targetSize = parseInt(btn.dataset.size);
        difficultyMenu.style.display = 'none';
        startGame();
      });
    });

    document.getElementById('closeTargetGame').onclick = () => {
      document.body.removeChild(win);
    };
  });
})();
(function () {
  const targetBtn = document.getElementById('menuBtn8');
  if (!targetBtn) return;

  targetBtn.addEventListener('click', () => {
    if (document.getElementById('clickRiskWindow')) return;

    const win = document.createElement('div');
    win.id = 'clickRiskWindow';
    win.style.cssText = `
      position: fixed;
      top: 150px;
      left: 150px;
      width: 300px;
      height: 250px;
      background: #222;
      color: white;
      border: 2px solid #444;
      border-radius: 8px;
      z-index: 10000;
      font-family: sans-serif;
      text-align: center;
    `;

    win.innerHTML = `
      <div id="clickHeader" style="padding: 10px; background: #333; cursor: move;">
        <strong>Click Gamble</strong>
        <button id="closeClickRisk" style="position:absolute; right:10px; top:8px; background:#900; color:white; border:none; border-radius:4px; padding:2px 6px; cursor:pointer;">X</button>
      </div>
      <div style="margin-top: 30px;">
        <button id="clickButton" style="font-size: 24px; padding: 20px 40px;">0</button>
        <div id="riskInfo" style="margin-top: 20px;">Reset kans: 1%</div>
      </div>
    `;

    document.body.appendChild(win);

    // Versleepbaar venster
    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('clickHeader');
    header.addEventListener('mousedown', e => {
      isDragging = true;
      offsetX = e.clientX - win.offsetLeft;
      offsetY = e.clientY - win.offsetTop;
    });
    document.addEventListener('mousemove', e => {
      if (isDragging) {
        win.style.left = e.clientX - offsetX + 'px';
        win.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', () => isDragging = false);

    const clickBtn = document.getElementById('clickButton');
    const riskDisplay = document.getElementById('riskInfo');
    let score = 0;
    let risk = 1;

    clickBtn.addEventListener('click', () => {
      const chance = Math.random() * 100;
      if (chance < risk) {
        alert(`Oh no your score was reset at ${risk.toFixed(1)}% kans.`);
        score = 0;
        risk = 1;
      } else {
        score++;
        risk += 1;
      }

      clickBtn.textContent = score;
      riskDisplay.textContent = `Reset chance: ${Math.min(risk, 100).toFixed(1)}%`;
    });

    document.getElementById('closeClickRisk').onclick = () => {
      document.body.removeChild(win);
    };
  });
})();
