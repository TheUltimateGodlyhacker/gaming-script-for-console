(function () {
  if (document.getElementById('customMenu')) {
    alert('This Menu already exists');
    return;
  }

  // CSS toevoegen
  const style = document.createElement('style');
  style.textContent = `
    #customMenu {
      position: fixed;
      top: 100px;
      left: 100px;
      width: 320px;
      background: #f0f0f0;
      border: 1px solid #ccc;
      box-shadow: 0 0 10px rgba(0,0,0,0.5);
      border-radius: 6px;
      font-family: sans-serif;
      z-index: 9999;
    }
    #customMenuHeader {
      background: #444;
      color: white;
      padding: 10px;
      cursor: move;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-top-left-radius: 6px;
      border-top-right-radius: 6px;
    }
    #customMenuButtons {
  display: flex;
  flex-wrap: wrap;
  padding: 10px;
  gap: 5px;
  max-height: 300px;  /* of een waarde die past bij je layout */
  overflow-y: auto;
}
    .menuButton {
      flex: 1 0 30%;
      padding: 6px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }
    .menuButton:hover {
      background: #0056b3;
    }
    #toggleMenu {
      background: #666;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      border-radius: 4px;
    }
    canvas#snakeCanvas {
      display: block;
      margin: 10px auto;
      border: 2px solid #333;
      background: #000;
    }
  `;
  document.head.appendChild(style);

  // Menu bouwen
  const menu = document.createElement('div');
  menu.id = 'customMenu';
  menu.innerHTML = `
    <div id="customMenuHeader">
      <span>Menu</span>
      <button id="toggleMenu">−</button>
    </div>
    <div id="customMenuButtons"></div>
  `;
  document.body.appendChild(menu);

  const buttonsContainer = document.getElementById('customMenuButtons');

const knopNamen = [
  "Snake", "Tetris", "Flappy bird", "Pac man", "Reaction time",
  "click test", "Series Memory", "10 targets", "Stop at 10 sec", "Dino game"
  // voeg hier tot max 50 namen toe
];

for (let i = 1; i <= 50; i++) {
  const btn = document.createElement('button');
  btn.className = 'menuButton';
  btn.textContent = knopNamen[i - 1] || 'Knop ' + i;  // gebruik naam of standaardtekst
  btn.id = 'menuBtn' + i;
  buttonsContainer.appendChild(btn);
}


  // Minimaliseer/maximaliseer
  let isMinimized = false;
  document.getElementById('toggleMenu').onclick = function () {
    isMinimized = !isMinimized;
    buttonsContainer.style.display = isMinimized ? 'none' : 'flex';
    this.textContent = isMinimized ? '+' : '−';
  };

  // Sleepfunctionaliteit
  const header = document.getElementById('customMenuHeader');
  let isDragging = false, offsetX, offsetY;

  header.addEventListener('mousedown', function (e) {
    isDragging = true;
    offsetX = e.clientX - menu.offsetLeft;
    offsetY = e.clientY - menu.offsetTop;
  });

  document.addEventListener('mousemove', function (e) {
    if (isDragging) {
      menu.style.left = e.clientX - offsetX + 'px';
      menu.style.top = e.clientY - offsetY + 'px';
    }
  });

  document.addEventListener('mouseup', function () {
    isDragging = false;
  });
})();
(function () {
  const btn1 = document.getElementById('menuBtn1');
  if (!btn1) {
    alert("Menu nog niet geladen!");
    return;
  }

  btn1.onclick = function () {
    if (document.getElementById('snakeWindow')) return;

    const snakeWindow = document.createElement('div');
    snakeWindow.id = 'snakeWindow';
    snakeWindow.style.position = 'fixed';
    snakeWindow.style.top = '150px';
    snakeWindow.style.left = '150px';
    snakeWindow.style.width = '320px';
    snakeWindow.style.background = '#222';
    snakeWindow.style.border = '2px solid #333';
    snakeWindow.style.borderRadius = '8px';
    snakeWindow.style.boxShadow = '0 0 12px rgba(0,0,0,0.7)';
    snakeWindow.style.zIndex = '10000';
    snakeWindow.innerHTML = `
      <div id="snakeHeader" style="background:#111; color:white; padding:8px; cursor:move; border-top-left-radius:8px; border-top-right-radius:8px;">
        Snake Game <button id="closeSnake" style="float:right;background:#900;color:white;border:none;border-radius:4px;padding:2px 6px;cursor:pointer;">X</button>
      </div>
      <canvas id="snakeCanvas" width="300" height="300" style="display:block;margin:10px auto;border:2px solid #444;background:black;"></canvas>
    `;
    document.body.appendChild(snakeWindow);

    document.getElementById('closeSnake').onclick = () => {
      clearInterval(game);
      snakeWindow.remove();
    };

    let isDragging = false, offsetX, offsetY;
    const header = document.getElementById('snakeHeader');
    header.addEventListener('mousedown', (e) => {
      isDragging = true;
      offsetX = e.clientX - snakeWindow.offsetLeft;
      offsetY = e.clientY - snakeWindow.offsetTop;
    });
    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        snakeWindow.style.left = e.clientX - offsetX + 'px';
        snakeWindow.style.top = e.clientY - offsetY + 'px';
      }
    });
    document.addEventListener('mouseup', () => isDragging = false);

    const canvas = document.getElementById('snakeCanvas');
    const ctx = canvas.getContext('2d');
    const gridSize = 10;
    let snake = [{ x: 150, y: 150 }];
    let direction = 'RIGHT';
    let food = { x: 100, y: 100 };
    let paused = false;

    function drawRect(x, y, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x, y, gridSize, gridSize);
    }

    function moveSnake() {
      if (paused) return;

      const head = { ...snake[0] };
      if (direction === 'RIGHT') head.x += gridSize;
      else if (direction === 'LEFT') head.x -= gridSize;
      else if (direction === 'UP') head.y -= gridSize;
      else if (direction === 'DOWN') head.y += gridSize;
      snake.unshift(head);

      if (head.x === food.x && head.y === food.y) {
        placeFood();
      } else {
        snake.pop();
      }

      if (
        head.x < 0 || head.x >= canvas.width ||
        head.y < 0 || head.y >= canvas.height ||
        snake.slice(1).some(p => p.x === head.x && p.y === head.y)
      ) {
        alert("Game Over!");
        clearInterval(game);
        snakeWindow.remove();
      }
    }

    function placeFood() {
      food = {
        x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize,
        y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize,
      };
    }

    function draw() {
      if (paused) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      snake.forEach(s => drawRect(s.x, s.y, 'lime'));
      drawRect(food.x, food.y, 'red');
    }

    document.addEventListener('keydown', (e) => {
      const key = e.key.toLowerCase();
      if (key === 'w' && direction !== 'DOWN') direction = 'UP';
      if (key === 's' && direction !== 'UP') direction = 'DOWN';
      if (key === 'a' && direction !== 'RIGHT') direction = 'LEFT';
      if (key === 'd' && direction !== 'LEFT') direction = 'RIGHT';
      if (e.code === 'Space') {
        paused = !paused;
      }
    });

    const game = setInterval(() => {
      moveSnake();
      draw();
    }, 100);
  };
})();
// Voeg deze JavaScript toe aan je script
document.getElementById('startTetrisBtn').addEventListener('click', () => {
  document.getElementById('tetrisContainer').style.display = 'block';
  startTetrisGame();
});

function startTetrisGame() {
  const canvas = document.getElementById('tetrisCanvas');
  const ctx = canvas.getContext('2d');
  const ROWS = 20;
  const COLS = 10;
  const BLOCK_SIZE = 30;
  let board = Array.from({ length: ROWS }, () => Array(COLS).fill(0));
  let currentPiece = null;
  let score = 0;
  let gameOver = false;

  function drawBlock(x, y, color) {
    ctx.fillStyle = color;
    ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
  }

  function drawBoard() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    board.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value) {
          drawBlock(x, y, 'cyan');
        }
      });
    });
  }

  function spawnPiece() {
    currentPiece = {
      x: 4,
      y: 0,
      shape: [
        [1, 1, 1],
        [0, 1, 0]
      ]
    };
  }

  function drawPiece() {
    currentPiece.shape.forEach((row, dy) => {
      row.forEach((value, dx) => {
        if (value) {
          drawBlock(currentPiece.x + dx, currentPiece.y + dy, 'red');
        }
      });
    });
  }

  function movePieceDown() {
    currentPiece.y += 1;
    if (collision()) {
      currentPiece.y -= 1;
      mergePiece();
      clearLines();
      spawnPiece();
      if (collision()) {
        endGame();
      }
    }
  }

  function collision() {
    return currentPiece.shape.some((row, dy) => {
      return row.some((value, dx) => {
        if (value) {
          const x = currentPiece.x + dx;
          const y = currentPiece.y + dy;
          return (
            x < 0 ||
            x >= COLS ||
            y >= ROWS ||
            board[y] && board[y][x]
          );
        }
        return false;
      });
    });
  }

  function mergePiece() {
    currentPiece.shape.forEach((row, dy) => {
      row.forEach((value, dx) => {
        if (value) {
          board[currentPiece.y + dy][currentPiece.x + dx] = 1;
        }
      });
    });
  }

  function clearLines() {
    let linesCleared = 0;
    board = board.filter(row => {
      if (row.every(cell => cell)) {
        linesCleared += 1;
        return false;
      }
      return true;
    });
    while (board.length < ROWS) {
      board.unshift(Array(COLS).fill(0));
    }
    score += linesCleared * 10;
  }

  function endGame() {
    gameOver = true;
    document.getElementById('tetrisOverlay').style.display = 'block';
    document.getElementById('finalScoreText').textContent = `Score: ${score}`;
  }

  document.getElementById('restartBtn').addEventListener('click', () => {
    board = Array.from({ length: ROWS }, () => Array(COLS).fill(0));
    score = 0;
    gameOver = false;
    document.getElementById('tetrisOverlay').style.display = 'none';
    spawnPiece();
    gameLoop();
  });

  function gameLoop() {
    if (gameOver) return;
    movePieceDown();
    drawBoard();
    drawPiece();
    setTimeout(gameLoop, 500);
  }

  spawnPiece();
  gameLoop();
}
